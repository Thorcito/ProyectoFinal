CCS PCM C Compiler, Version 5.025, 32741               07-ago.-22 18:20

               Filename:   C:\Users\usuario\OneDrive\TEC\2022 Segundo Semestre\Microsistemas y Microcontroladores GR1\Proyecto Carro Automatizado\Código de motores\MovimientoMotoresOK.lst

               ROM used:   182 words (2%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           9 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   04A
0003:  NOP
.................... /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
.................... ::::::::::::::::::::::::::::   CONTROL DE MOTOR DC    :::::::::::::::::::::::::::::::: 
.................... :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
.................... ::::::::::::::::::::::::::::    CANAL DE YOUTUBE      :::::::::::::::::::::::::::::::: 
.................... ::::::::::::::::::::::::::::        Jorge APC         :::::::::::::::::::::::::::::::: 
.................... :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
.................... :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/ 
.................... #include <16F877A.h>                                     //PIC 16F877A 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=10                                           //Habilitamos el uso del módulo ADC 
.................... #fuses XT, NOWDT, PUT, NOLVP, NOPROTECT                  //Bits de configuración 
.................... #use delay(clock=4000000)                                //Crista de 4HMz 
0004:  MOVLW  23
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #use fast_io(B)    
.................... #use fast_io(C) 
....................  
.................... unsigned int16 analog; 
....................  
.................... //:::::::::::::::::::::::::::: Función de configuración ::::::::::::::::::::::::::::::: 
.................... void configuracion (void) 
.................... { 
....................    port_b_pullups(TRUE);                                 //Habilitamos ñas resistencias Pull Up del port b 
0019:  BSF    03.5
001A:  BCF    01.7
....................    output_b(0); 
001B:  BCF    03.5
001C:  CLRF   06
....................    set_tris_b(0b0111);                                        //Configuramos los bit RB0, RB1 y RB2 como entradas 
001D:  MOVLW  07
001E:  BSF    03.5
001F:  MOVWF  06
....................    output_c(0); 
0020:  BCF    03.5
0021:  CLRF   07
....................    set_tris_c(0);                                        //Configuramos los 8 bits del port C como salidas 
0022:  MOVLW  00
0023:  BSF    03.5
0024:  MOVWF  07
....................    setup_adc(ADC_CLOCK_DIV_32);                          //Utilizamos el oscilador interno del módulo ADC 
0025:  BCF    1F.6
0026:  BCF    03.5
0027:  BCF    1F.6
0028:  BSF    1F.7
0029:  BSF    03.5
002A:  BSF    1F.7
002B:  BCF    03.5
002C:  BSF    1F.0
....................    setup_adc_ports(AN0);                                 //Definimos la entrada analógica 
002D:  BSF    03.5
002E:  BCF    1F.0
002F:  BSF    1F.1
0030:  BSF    1F.2
0031:  BSF    1F.3
....................    set_adc_channel(0);                                   //definimos el canal 0 
0032:  MOVWF  78
0033:  BCF    03.5
0034:  MOVF   1F,W
0035:  ANDLW  C7
0036:  IORWF  78,W
0037:  MOVWF  1F
....................    //setup_ccp1(ccp_pwm);                                //Habilitamos el módulo PWM 1 
....................    //setup_ccp2(ccp_pwm);                                //Habilitamos el módulo PWM 2 
....................    setup_timer_2(T2_DIV_BY_16, 127,1);                   //Prescaler 16, PR2=127,Postcaler 1 
0038:  MOVLW  00
0039:  MOVWF  78
003A:  IORLW  06
003B:  MOVWF  12
003C:  MOVLW  7F
003D:  BSF    03.5
003E:  MOVWF  12
....................    delay_ms(500);                                        //Retardo de 500ms 
003F:  MOVLW  02
0040:  BCF    03.5
0041:  MOVWF  22
0042:  MOVLW  FA
0043:  MOVWF  23
0044:  CALL   004
0045:  DECFSZ 22,F
0046:  GOTO   042
0047:  BCF    0A.3
0048:  BCF    0A.4
0049:  GOTO   057 (RETURN)
.................... } 
....................  
.................... //:::::::::::::::::::::::::::: Función de principal :::::::::::::::::::::::::::::::::::: 
.................... void main (void) 
004A:  MOVF   03,W
004B:  ANDLW  1F
004C:  MOVWF  03
004D:  BSF    03.5
004E:  BSF    1F.0
004F:  BSF    1F.1
0050:  BSF    1F.2
0051:  BCF    1F.3
0052:  MOVLW  07
0053:  MOVWF  1C
0054:  BCF    03.7
.................... { 
....................    configuracion();                                      //Llamamos a la función configuración 
0055:  BCF    03.5
0056:  GOTO   019
....................    while(1) 
....................    { 
....................    analog=read_adc();                                    //Leemos el valor de la conversión ADC y la guardamos en analog 
0057:  BSF    1F.2
0058:  BTFSC  1F.2
0059:  GOTO   058
005A:  BSF    03.5
005B:  MOVF   1E,W
005C:  BCF    03.5
005D:  MOVWF  20
005E:  MOVF   1E,W
005F:  MOVWF  21
....................    if(input(PIN_B3)==1)                                  //Si el el led RB3 esta en alto 
0060:  BTFSS  06.3
0061:  GOTO   075
....................    { 
....................       set_pwm1_duty(analog);                             //Cargamos el ciclo de trabajo con el valos "analog" 
0062:  MOVF   21,W
0063:  MOVWF  79
0064:  MOVF   20,W
0065:  MOVWF  78
0066:  RRF    79,F
0067:  RRF    78,F
0068:  RRF    79,F
0069:  RRF    78,F
006A:  RRF    79,F
006B:  MOVF   78,W
006C:  MOVWF  15
006D:  RRF    79,F
006E:  RRF    79,W
006F:  ANDLW  30
0070:  MOVWF  77
0071:  MOVF   17,W
0072:  ANDLW  CF
0073:  IORWF  77,W
0074:  MOVWF  17
....................    } 
....................    if(input(PIN_B4)==1)                                  //Si el led RB4 esta en alto 
0075:  BTFSS  06.4
0076:  GOTO   08A
....................    { 
....................       set_pwm2_duty(analog);                             //Cargamos el ciclo de trabajo con el valor "analog" 
0077:  MOVF   21,W
0078:  MOVWF  79
0079:  MOVF   20,W
007A:  MOVWF  78
007B:  RRF    79,F
007C:  RRF    78,F
007D:  RRF    79,F
007E:  RRF    78,F
007F:  RRF    79,F
0080:  MOVF   78,W
0081:  MOVWF  1B
0082:  RRF    79,F
0083:  RRF    79,W
0084:  ANDLW  30
0085:  MOVWF  77
0086:  MOVF   1D,W
0087:  ANDLW  CF
0088:  IORWF  77,W
0089:  MOVWF  1D
....................    } 
....................    delay_ms(10);                                         //Retardo de 10ms 
008A:  MOVLW  0A
008B:  MOVWF  23
008C:  CALL   004
....................    if(input(PIN_B0)==0)                                  //Si el pulsador RB0 esta a nivel bajo 
008D:  BTFSC  06.0
008E:  GOTO   09D
....................    { 
....................       if(input(PIN_B3)==0)                               //Si el led esta apagado  
008F:  BTFSC  06.3
0090:  GOTO   09D
....................       { 
....................          output_b(0);                                    //Ponemos los dos leds a nivel bajo 
0091:  CLRF   06
....................          setup_ccp1(ccp_off);                            //Desactivamos la señal PWM1 
0092:  MOVLW  F0
0093:  ANDWF  17,F
....................          setup_ccp2(ccp_off);                            //Desactivamos la señal PWM2 
0094:  ANDWF  1D,F
....................          output_c(0);                                    //Ponemos a nivel bajo las señales PWM 
0095:  CLRF   07
....................          delay_ms(100);                                  //Retardo de 100ms 
0096:  MOVLW  64
0097:  MOVWF  23
0098:  CALL   004
....................          setup_ccp1(ccp_pwm);                            //Activamos la señal pwm1 
0099:  BCF    07.2
009A:  MOVLW  0C
009B:  MOVWF  17
....................          output_high(PIN_B3);                            //Ponemos a nivel alto el led RB3 
009C:  BSF    06.3
....................       } 
....................    } 
....................    if(input(PIN_B1)==0)                                  //Si el pulsador RB1 esta a nivel bajo 
009D:  BTFSC  06.1
009E:  GOTO   0AD
....................    { 
....................       if(input(PIN_B4)==0)                               //Si el led RB4 esta en nivel bajo                            
009F:  BTFSC  06.4
00A0:  GOTO   0AD
....................       { 
....................          output_b(0);                                    //Ponemos los dos leds a nivel bajo 
00A1:  CLRF   06
....................          setup_ccp1(ccp_off);                            //Desactivamos la señal PWM1 
00A2:  MOVLW  F0
00A3:  ANDWF  17,F
....................          setup_ccp2(ccp_off);                            //Desactivamos la señal PWM2 
00A4:  ANDWF  1D,F
....................          output_c(0);                                    //Ponemos a nivel bajo las señales PWM 
00A5:  CLRF   07
....................          delay_ms(100);                                  //Retardo de 100ms 
00A6:  MOVLW  64
00A7:  MOVWF  23
00A8:  CALL   004
....................          setup_ccp2(ccp_pwm);                            //Activamos la señal pwm2 
00A9:  BCF    07.1
00AA:  MOVLW  0C
00AB:  MOVWF  1D
....................          output_high(PIN_B4);                            //Ponmos a nivel alto el led RB4 
00AC:  BSF    06.4
....................       } 
....................    } 
....................    if(input(PIN_B2)==0)                                  //Si el pulsador de STOP RB2 esta en nivel bajo 
00AD:  BTFSC  06.2
00AE:  GOTO   0B4
....................    { 
....................       setup_ccp1(ccp_off);                               //Desactivamos la señal PWM1 
00AF:  MOVLW  F0
00B0:  ANDWF  17,F
....................       setup_ccp2(ccp_off);                               //Desactivamos la señal PWM2 
00B1:  ANDWF  1D,F
....................       output_c(0);                                       //Poneos a nivel bajos las señales PWM 
00B2:  CLRF   07
....................       output_b(0);                                       //Ponemos a nivel bajo los dos leds  
00B3:  CLRF   06
....................    } 
00B4:  GOTO   057
....................    } 
.................... } 
....................  
00B5:  SLEEP
....................     

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
