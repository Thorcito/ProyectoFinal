CCS PCM C Compiler, Version 5.076, 5967               18-Dic.-18 14:29

               Filename:   D:\PC - Jorge Peralta\KOKO\Electrónica\Proyecto  PIC\CCS\PIC16F877A\Comunicación RS232\Comunicación Serie.lst

               ROM used:   486 words (6%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           41 (11%) worst case
               Stack used: 8 locations (3 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   163
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   0CC
.................... /*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
....................    ::::::::::::::::::::::                              :::::::::::::::::::: 
....................    ::::::::::::::::::::::      Comunicación Serie      :::::::::::::::::::: 
....................    ::::::::::::::::::::::  Canal Youtube: Jorge APC    :::::::::::::::::::: 
....................    ::::::::::::::::::::::                              :::::::::::::::::::: 
....................    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/ 
....................     
....................    #include <16F877A.h>                            //Microcontrolador utilizado 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0101:  DATA 49,27
0102:  DATA 47,29
0103:  DATA C5,29
0104:  DATA 45,10
0105:  DATA D4,22
0106:  DATA 58,2A
0107:  DATA 4F,1D
0108:  DATA 00,00
0109:  MOVF   0B,W
010A:  MOVWF  2F
010B:  BCF    0B.7
010C:  BSF    03.5
010D:  BSF    03.6
010E:  BSF    0C.7
010F:  BSF    0C.0
0110:  NOP
0111:  NOP
0112:  BCF    03.5
0113:  BCF    03.6
0114:  BTFSC  2F.7
0115:  BSF    0B.7
0116:  BSF    03.6
0117:  MOVF   0C,W
0118:  ANDLW  7F
0119:  BTFSC  03.2
011A:  GOTO   15F
011B:  BCF    03.6
011C:  MOVWF  2F
011D:  BSF    03.6
011E:  MOVF   0D,W
011F:  BCF    03.6
0120:  MOVWF  30
0121:  BSF    03.6
0122:  MOVF   0F,W
0123:  BCF    03.6
0124:  MOVWF  31
0125:  MOVF   2F,W
0126:  BTFSS  0C.4
0127:  GOTO   126
0128:  MOVWF  19
0129:  MOVF   30,W
012A:  BSF    03.6
012B:  MOVWF  0D
012C:  BCF    03.6
012D:  MOVF   31,W
012E:  BSF    03.6
012F:  MOVWF  0F
0130:  BCF    03.6
0131:  MOVF   0B,W
0132:  MOVWF  32
0133:  BCF    0B.7
0134:  BSF    03.5
0135:  BSF    03.6
0136:  BSF    0C.7
0137:  BSF    0C.0
0138:  NOP
0139:  NOP
013A:  BCF    03.5
013B:  BCF    03.6
013C:  BTFSC  32.7
013D:  BSF    0B.7
013E:  BSF    03.6
013F:  RLF    0C,W
0140:  RLF    0E,W
0141:  ANDLW  7F
0142:  BTFSC  03.2
0143:  GOTO   15F
0144:  BCF    03.6
0145:  MOVWF  2F
0146:  BSF    03.6
0147:  MOVF   0D,W
0148:  BCF    03.6
0149:  MOVWF  30
014A:  BSF    03.6
014B:  MOVF   0F,W
014C:  BCF    03.6
014D:  MOVWF  31
014E:  MOVF   2F,W
014F:  BTFSS  0C.4
0150:  GOTO   14F
0151:  MOVWF  19
0152:  MOVF   30,W
0153:  BSF    03.6
0154:  MOVWF  0D
0155:  BCF    03.6
0156:  MOVF   31,W
0157:  BSF    03.6
0158:  MOVWF  0F
0159:  INCF   0D,F
015A:  BTFSC  03.2
015B:  INCF   0F,F
015C:  BCF    03.6
015D:  GOTO   109
015E:  BSF    03.6
015F:  BCF    03.6
0160:  BCF    0A.3
0161:  BCF    0A.4
0162:  GOTO   1E4 (RETURN)
....................  
.................... #list 
....................  
....................    #fuses XT, NOWDT, NOPROTECT, PUT, NOLVP         //Bits de configuración 
....................    #use delay(clock=4000000)                       //Cristal Externo de 4MHz 
*
00B7:  MOVLW  3B
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  BTFSC  03.2
00BC:  GOTO   0CB
00BD:  MOVLW  01
00BE:  MOVWF  78
00BF:  CLRF   77
00C0:  DECFSZ 77,F
00C1:  GOTO   0C0
00C2:  DECFSZ 78,F
00C3:  GOTO   0BF
00C4:  MOVLW  4A
00C5:  MOVWF  77
00C6:  DECFSZ 77,F
00C7:  GOTO   0C6
00C8:  GOTO   0C9
00C9:  DECFSZ 00,F
00CA:  GOTO   0BD
00CB:  RETURN
....................    #include <lcd.c>                                //Incluimos la libreria LCD 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0057:  MOVLW  0F
0058:  BSF    03.5
0059:  ANDWF  08,W
005A:  IORLW  F0
005B:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005C:  BCF    03.5
005D:  BSF    08.2
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_enable(1); 
005F:  BSF    08.0
....................    delay_cycles(1); 
0060:  NOP
....................    high = lcd_read_nibble(); 
0061:  CALL   051
0062:  MOVF   78,W
0063:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
0064:  BCF    08.0
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(1); 
0066:  BSF    08.0
....................    delay_us(1); 
0067:  NOP
....................    low = lcd_read_nibble(); 
0068:  CALL   051
0069:  MOVF   78,W
006A:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
006B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006C:  MOVLW  0F
006D:  BSF    03.5
006E:  ANDWF  08,W
006F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0070:  BCF    03.5
0071:  SWAPF  42,W
0072:  MOVWF  77
0073:  MOVLW  F0
0074:  ANDWF  77,F
0075:  MOVF   77,W
0076:  IORWF  41,W
0077:  MOVWF  78
0078:  RETURN
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0051:  MOVF   08,W
0052:  MOVWF  77
0053:  SWAPF  08,W
0054:  ANDLW  0F
0055:  MOVWF  78
....................   #endif 
0056:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0079:  SWAPF  42,W
007A:  ANDLW  F0
007B:  MOVWF  77
007C:  MOVLW  0F
007D:  ANDWF  08,W
007E:  IORWF  77,W
007F:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_enable(1); 
0081:  BSF    08.0
....................    delay_us(2); 
0082:  GOTO   083
....................    lcd_output_enable(0); 
0083:  BCF    08.0
0084:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
0085:  BSF    03.5
0086:  BCF    08.0
....................    lcd_rs_tris(); 
0087:  BCF    08.1
....................    lcd_rw_tris(); 
0088:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0089:  BCF    03.5
008A:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
008B:  CALL   057
008C:  MOVF   78,W
008D:  MOVWF  41
008E:  BTFSC  41.7
008F:  GOTO   08B
....................    lcd_output_rs(address); 
0090:  BTFSS  3F.0
0091:  BCF    08.1
0092:  BTFSC  3F.0
0093:  BSF    08.1
....................    delay_cycles(1); 
0094:  NOP
....................    lcd_output_rw(0); 
0095:  BCF    08.2
....................    delay_cycles(1); 
0096:  NOP
....................    lcd_output_enable(0); 
0097:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0098:  SWAPF  40,W
0099:  MOVWF  41
009A:  MOVLW  0F
009B:  ANDWF  41,F
009C:  MOVF   41,W
009D:  MOVWF  42
009E:  CALL   079
....................    lcd_send_nibble(n & 0xf); 
009F:  MOVF   40,W
00A0:  ANDLW  0F
00A1:  MOVWF  41
00A2:  MOVWF  42
00A3:  CALL   079
00A4:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
0178:  MOVLW  28
0179:  BCF    03.5
017A:  MOVWF  30
017B:  MOVLW  0C
017C:  MOVWF  31
017D:  MOVLW  01
017E:  MOVWF  32
017F:  MOVLW  06
0180:  MOVWF  33
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0181:  BCF    08.0
....................    lcd_output_rs(0); 
0182:  BCF    08.1
....................    lcd_output_rw(0); 
0183:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0184:  MOVLW  0F
0185:  BSF    03.5
0186:  ANDWF  08,W
0187:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0188:  BCF    08.0
....................    lcd_rs_tris(); 
0189:  BCF    08.1
....................    lcd_rw_tris(); 
018A:  BCF    08.2
018B:  BCF    03.5
018C:  CLRF   2B
018D:  BTFSC  0B.7
018E:  BSF    2B.7
018F:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
0190:  MOVLW  0F
0191:  MOVWF  3B
0192:  CALL   0B7
0193:  BTFSC  2B.7
0194:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
0195:  MOVLW  01
0196:  MOVWF  2F
0197:  MOVF   2F,W
0198:  SUBLW  03
0199:  BTFSS  03.0
019A:  GOTO   1AF
019B:  CLRF   2B
019C:  BTFSC  0B.7
019D:  BSF    2B.7
019E:  BCF    0B.7
....................    { 
....................        lcd_send_nibble(3); 
019F:  MOVLW  03
01A0:  MOVWF  42
01A1:  CALL   079
01A2:  BTFSC  2B.7
01A3:  BSF    0B.7
01A4:  CLRF   2B
01A5:  BTFSC  0B.7
01A6:  BSF    2B.7
01A7:  BCF    0B.7
....................        delay_ms(5); 
01A8:  MOVLW  05
01A9:  MOVWF  3B
01AA:  CALL   0B7
01AB:  BTFSC  2B.7
01AC:  BSF    0B.7
01AD:  INCF   2F,F
01AE:  GOTO   197
01AF:  CLRF   2B
01B0:  BTFSC  0B.7
01B1:  BSF    2B.7
01B2:  BCF    0B.7
....................    } 
....................     
....................    lcd_send_nibble(2); 
01B3:  MOVLW  02
01B4:  MOVWF  42
01B5:  CALL   079
01B6:  BTFSC  2B.7
01B7:  BSF    0B.7
01B8:  CLRF   2B
01B9:  BTFSC  0B.7
01BA:  BSF    2B.7
01BB:  BCF    0B.7
....................    delay_ms(5); 
01BC:  MOVLW  05
01BD:  MOVWF  3B
01BE:  CALL   0B7
01BF:  BTFSC  2B.7
01C0:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
01C1:  CLRF   2F
01C2:  MOVF   2F,W
01C3:  SUBLW  03
01C4:  BTFSS  03.0
01C5:  GOTO   1D8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01C6:  MOVLW  30
01C7:  ADDWF  2F,W
01C8:  MOVWF  04
01C9:  BCF    03.7
01CA:  MOVF   00,W
01CB:  MOVWF  34
01CC:  CLRF   2B
01CD:  BTFSC  0B.7
01CE:  BSF    2B.7
01CF:  BCF    0B.7
01D0:  CLRF   3F
01D1:  MOVF   34,W
01D2:  MOVWF  40
01D3:  CALL   085
01D4:  BTFSC  2B.7
01D5:  BSF    0B.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01D6:  INCF   2F,F
01D7:  GOTO   1C2
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
00A5:  DECFSZ 3C,W
00A6:  GOTO   0A8
00A7:  GOTO   0AB
....................       address=LCD_LINE_TWO; 
00A8:  MOVLW  40
00A9:  MOVWF  3D
00AA:  GOTO   0AC
....................    else 
....................       address=0; 
00AB:  CLRF   3D
....................       
....................    address+=x-1; 
00AC:  MOVLW  01
00AD:  SUBWF  3B,W
00AE:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address); 
00AF:  MOVF   3D,W
00B0:  IORLW  80
00B1:  MOVWF  3E
00B2:  CLRF   3F
00B3:  MOVF   3E,W
00B4:  MOVWF  40
00B5:  CALL   085
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
00D2:  MOVF   3A,W
00D3:  XORLW  07
00D4:  BTFSC  03.2
00D5:  GOTO   0E0
00D6:  XORLW  0B
00D7:  BTFSC  03.2
00D8:  GOTO   0E5
00D9:  XORLW  06
00DA:  BTFSC  03.2
00DB:  GOTO   0ED
00DC:  XORLW  02
00DD:  BTFSC  03.2
00DE:  GOTO   0F3
00DF:  GOTO   0F8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E0:  MOVLW  01
00E1:  MOVWF  3B
00E2:  MOVWF  3C
00E3:  CALL   0A5
00E4:  GOTO   0FD
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E5:  CLRF   3F
00E6:  MOVLW  01
00E7:  MOVWF  40
00E8:  CALL   085
....................                      delay_ms(2); 
00E9:  MOVLW  02
00EA:  MOVWF  3B
00EB:  CALL   0B7
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00EC:  GOTO   0FD
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00ED:  MOVLW  01
00EE:  MOVWF  3B
00EF:  MOVLW  02
00F0:  MOVWF  3C
00F1:  CALL   0A5
00F2:  GOTO   0FD
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F3:  CLRF   3F
00F4:  MOVLW  10
00F5:  MOVWF  40
00F6:  CALL   085
00F7:  GOTO   0FD
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F8:  MOVLW  01
00F9:  MOVWF  3F
00FA:  MOVF   3A,W
00FB:  MOVWF  40
00FC:  CALL   085
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................    #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8)   //Configuramos la comunicación serie 
....................     
....................    char dato; 
....................     
....................    #INT_RDA                                        //Interrupción por datos recibidos disponibles RS232 
....................    void serie(void)                                //Función de interrupción por dato recivido comunicación serie 
....................    { 
....................       dato=getc();                                 //Almacena el carácter recibido por la patilla RCV  
*
00CC:  BTFSS  0C.5
00CD:  GOTO   0CC
00CE:  MOVF   1A,W
00CF:  MOVWF  2C
....................                                                    //y retorna el carácter recibido este caracter se guarda en la variable "dato" 
....................       printf(lcd_putc, "%c", dato);                //Imprimir el la pantalle LCD el "caracter dato" 
00D0:  MOVF   2C,W
00D1:  MOVWF  3A
*
00FD:  BCF    0C.5
00FE:  BCF    0A.3
00FF:  BCF    0A.4
0100:  GOTO   02D
....................    } 
....................     
....................    void configuracion (void)                       //Función de configuración 
....................    { 
....................       lcd_init();                                  //Inicializamos la pantalla LCD 
....................       enable_interrupts(GLOBAL);                   //Habilitamos las interrupciones 
*
01D8:  MOVLW  C0
01D9:  IORWF  0B,F
....................       enable_interrupts(INT_RDA);                  //Habilitamos la interrupción por dato recibido RS232 
01DA:  BSF    03.5
01DB:  BSF    0C.5
....................    } 
....................     
....................    void main (void)                                //Función Principal 
*
0163:  MOVF   03,W
0164:  ANDLW  1F
0165:  MOVWF  03
0166:  MOVLW  19
0167:  BSF    03.5
0168:  MOVWF  19
0169:  MOVLW  A6
016A:  MOVWF  18
016B:  MOVLW  90
016C:  BCF    03.5
016D:  MOVWF  18
016E:  CLRF   2E
016F:  CLRF   2D
0170:  BSF    03.5
0171:  BSF    1F.0
0172:  BSF    1F.1
0173:  BSF    1F.2
0174:  BCF    1F.3
0175:  MOVLW  07
0176:  MOVWF  1C
0177:  BCF    03.7
....................    { 
....................       configuracion();                             //Llamamos a la función de configuración. 
....................       printf("INGRESE TEXTO:");          //Cadena de caracteres 
*
01DC:  MOVLW  01
01DD:  BCF    03.5
01DE:  BSF    03.6
01DF:  MOVWF  0D
01E0:  MOVLW  01
01E1:  MOVWF  0F
01E2:  BCF    03.6
01E3:  GOTO   109
....................       while (true)                                 //Bucle infinito 
....................       { 
01E4:  GOTO   1E4
....................           
....................       } 
....................    } 
....................     
01E5:  SLEEP
....................        

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
